{"version":3,"sources":["assets/Format.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","prices","setPrices","onFileChange","e","preventDefault","f","target","files","reader","FileReader","onload","data","renderedData","XLSX","type","dataParse","sheet_to_json","Sheets","SheetNames","header","qInfo","wbData","i","length","rowData","j","isNaN","parseFloat","price","console","log","push","wb","json_to_sheet","excelBuffer","bookType","dd","Blob","FileSaver","excelReader","result","readAsBinaryString","updateMultiplier","mult","newPriceList","slice","style","justifyContent","alignItems","display","flexDirection","paddingBottom","onChange","event","color","fontSize","paddingRight","value","fontWeight","src","require","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gOAAAA,EAAOC,QAAU,IAA0B,oC,qGCuJ5BC,EAnJH,WAAO,IAAD,EAEYC,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAFvD,mBAETC,EAFS,KAEDC,EAFC,KAmCVC,EAAe,SAACC,GACpBA,EAAEC,iBACF,IAA4BC,EAAhBF,EAAEG,OAAOC,MAAiB,GAClCC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAUP,IAnCR,SAACQ,GAQnB,IAPA,IAAIC,EAAeC,OAAUF,EAAM,CAAEG,KAAM,WACrCC,EAAYF,QAAWG,cAAcJ,EAAaK,OAAOL,EAAaM,WAAW,IAAK,CAAEC,OAAQ,IAElGC,EAAQL,EAAU,GAElBM,EAAS,GAEJC,EAAI,EAAGA,EAAIP,EAAUQ,OAAQD,IAAK,CAEzC,IADA,IAAIE,EAAU,GACLC,EAAI,EAAGA,EAAIV,EAAUO,GAAGC,OAAQE,IACvC,GAAS,GAALA,GAAWC,MAAMC,WAAWZ,EAAUO,GAAGG,KAK3CD,EAAQJ,EAAMK,IAAMV,EAAUO,GAAGG,OALgB,CACjD,IAAIG,EAAQD,WAAWZ,EAAUO,GAAGG,IACpCD,EAAQJ,EAAMK,IAAMG,EAAQ5B,EAAOyB,EAAI,GAM3CI,QAAQC,IAAIN,GACZH,EAAOU,KAAKP,GAGd,IACIQ,EAAK,CAAEf,OAAQ,CAAE,KADVJ,QAAWoB,cAAcZ,IACDH,WAAY,CAAC,SAC1CgB,EAAcrB,QAAWmB,EAAI,CAAEG,SAAU,OAAQrB,KAAM,UACvDsB,EAAK,IAAIC,KAAK,CAACH,GAAc,CAAEpB,KAAM,oFAC3CwB,SAAiBF,EAAI,aASnBG,CAAYpC,EAAEG,OAAOkC,SAEvBX,QAAQC,IAAIzB,GACZG,EAAOiC,mBAAmBpC,IAGtBqC,EAAmB,SAACC,EAAMrB,GAC9B,IAAIsB,EAAe5C,EAAO6C,QAC1BD,EAAatB,GAAKK,WAAWgB,GAC7Bd,QAAQC,IAAIc,GACZ3C,EAAU2C,IAIZ,OACE,yBAAKE,MAAO,CAAEC,eAAgB,SAAUC,WAAY,SAAUC,QAAS,OAAQC,cAAe,WAC5F,sDAGA,yBAAKJ,MAAO,CAAEK,cAAe,SAC3B,2BAAOrC,KAAK,OAAOsC,SAAU,SAACC,GAAD,OAAWnD,EAAamD,OAEvD,yBAAKP,MAAO,CAAEK,cAAe,SAC3B,+CACkB,0BAAML,MAAO,CAAEQ,MAAO,MAAOC,SAAU,SAAvC,4BAElB,6BACE,2BAAOT,MAAO,CAAEU,aAAc,SAA9B,OAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,OAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,OAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,QAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,QAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,QAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,SAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,SAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,SAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,SAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,IAAIA,MAAOzD,EAAO,MAE3F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,UAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,KAAKA,MAAOzD,EAAO,OAE5F,6BACE,2BAAO8C,MAAO,CAAEU,aAAc,SAA9B,UAGA,2BAAO1C,KAAK,SAASsC,SAAU,SAACjD,GAAD,OAAOuC,EAAiBvC,EAAEG,OAAOmD,MAAO,KAAKA,MAAOzD,EAAO,QAG9F,6BACE,kDAAuB,0BAAM8C,MAAO,CAAEY,WAAY,OAAQJ,MAAO,MAAOC,SAAS,SAA1D,QAAvB,kCACA,yBAAKI,IAAKC,EAAQ,SCrINC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.43088841.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Format.337fa5d4.png\";","import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport * as FileSaver from 'file-saver';\n\nconst App = () => {\n\n  const [prices, setPrices] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n  const excelReader = (data) => {\n    let renderedData = XLSX.read(data, { type: 'binary' });\n    const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\n\n    let qInfo = dataParse[0]\n\n    let wbData = []\n\n    for (let i = 1; i < dataParse.length; i++) {\n      let rowData = {}\n      for (let j = 0; j < dataParse[i].length; j++) {\n        if (j != 0 && !isNaN(parseFloat(dataParse[i][j]))) {\n          let price = parseFloat(dataParse[i][j])\n          rowData[qInfo[j]] = price * prices[j - 1]\n        }\n        else {\n          rowData[qInfo[j]] = dataParse[i][j]\n        }\n      }\n      console.log(rowData)\n      wbData.push(rowData)\n    }\n\n    const ws = XLSX.utils.json_to_sheet(wbData)\n    let wb = { Sheets: { 'data': ws }, SheetNames: ['data'] }\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const dd = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\n    FileSaver.saveAs(dd, 'Data.xlsx');\n\n  }\n\n  const onFileChange = (e) => {\n    e.preventDefault();\n    var files = e.target.files, f = files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      excelReader(e.target.result)\n    };\n    console.log(f)\n    reader.readAsBinaryString(f)\n  }\n\n  const updateMultiplier = (mult, i) => {\n    let newPriceList = prices.slice()\n    newPriceList[i] = parseFloat(mult)\n    console.log(newPriceList)\n    setPrices(newPriceList)\n  }\n\n\n  return (\n    <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>\n      <h2>\n        Upload Excel File Here\n      </h2>\n      <div style={{ paddingBottom: '20px' }}>\n        <input type=\"file\" onChange={(event) => onFileChange(event)} />\n      </div>\n      <div style={{ paddingBottom: '20px' }}>\n        <h2>\n          Multipler Value <span style={{ color: 'red', fontSize: '13px' }}>(numbers/ decimal only)</span>\n        </h2>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q10\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 0)} value={prices[0]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q25\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 1)} value={prices[1]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q50\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 2)} value={prices[2]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q100\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 3)} value={prices[3]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q250\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 4)} value={prices[4]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q500\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 5)} value={prices[5]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q1000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 6)} value={prices[6]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q2500\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 7)} value={prices[7]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q3000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 8)} value={prices[8]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q5000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 9)} value={prices[9]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q10000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 10)} value={prices[10]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q25000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 11)} value={prices[11]} />\n        </div>\n      </div>\n      <div>\n        <h3>Your Uploaded File <span style={{ fontWeight: 'bold', color: 'red', fontSize:'20px' }}>MUST</span> follow the following format: </h3>\n        <img src={require('./assets/Format.png')} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}