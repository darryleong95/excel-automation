{"version":3,"sources":["assets/Format.png","views/compile.js","views/compare.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Compile","useState","fileA","setFileA","fileB","setFileB","q","setQs","titleColumn","setTitleColumn","onFileChange","e","isFirstFile","preventDefault","f","target","files","reader","FileReader","onload","data","renderedData","XLSX","type","dataParse","sheet_to_json","Sheets","SheetNames","header","i","length","key","parseInt","fileDict","partName","priceQuantity","j","quantity","value","undefined","excelReader","result","readAsBinaryString","style","justifyContent","alignItems","display","flexDirection","paddingBottom","fontWeight","fontSize","onChange","event","disabled","Object","keys","color","map","paddingRight","mult","console","log","tmp","JSON","parse","stringify","toString","parseFloat","updateMultiplier","textTransform","onClick","fileAKeys","fileBKeys","combined","concat","uniqueItems","Set","quantities","individualItemPrice","A","B","wbData","rowData","priceList","quantityArr","priceArr","values","isNaN","push","wb","json_to_sheet","excelBuffer","bookType","dd","Blob","FileSaver","downloadFile","marginTop","width","height","border","alt","src","require","borderRadius","Compare","EURO","USD","exchange","setExchange","stock","fileNo","handlingCharge","markUp","mpn","brand","qty","remarks","parseStockAvailbleFile","opoCurr","opoPrice","opoDate","excelDateToJSDate","getTime","parseOpenPoPriceList","grCurr","grPrice","grDate","parseGoodsReceivedPriceList","serial","utc_days","Math","floor","date_info","Date","getFullYear","getMonth","getDate","workbookRows","mpns","myHeader","item","row","grPriceUSD","opoPriceUSD","highestPrice","unitPrice","App","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f52107fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Format.c48584e9.png\";","import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport * as FileSaver from 'file-saver';\r\n\r\nconst Compile = () => {\r\n\r\n  const [fileA, setFileA] = useState({})\r\n  const [fileB, setFileB] = useState({})\r\n\r\n  const [q, setQs] = useState({})\r\n  const [titleColumn, setTitleColumn] = useState(\"\")\r\n\r\n  const excelReader = (data, isFirstFile) => {\r\n    let renderedData = XLSX.read(data, { type: 'binary' });\r\n    const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\r\n\r\n    setTitleColumn(dataParse[0][0])\r\n\r\n    for (let i = 1; i < dataParse[0].length; i++) {\r\n      let key = parseInt(dataParse[0][i])\r\n      if (!(key in q))\r\n        q[key] = 1\r\n    }\r\n\r\n    setQs(q)\r\n\r\n    let fileDict = {}\r\n\r\n    for (let i = 1; i < dataParse.length; i++) {\r\n      let partName = dataParse[i][0]\r\n\r\n      let priceQuantity = {}\r\n      for (let j = 1; j < dataParse[i].length; j++) {\r\n        let quantity = parseInt(dataParse[0][j])\r\n        let value = dataParse[i][j]\r\n        priceQuantity[quantity] = value\r\n      }\r\n\r\n      fileDict[partName] = priceQuantity\r\n    }\r\n\r\n    delete fileDict[undefined]\r\n    isFirstFile ? setFileA(fileDict) : setFileB(fileDict)\r\n  }\r\n\r\n  const onFileChange = (e, isFirstFile) => {\r\n    e.preventDefault();\r\n    var files = e.target.files, f = files[0];\r\n    var reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      excelReader(e.target.result, isFirstFile)\r\n    };\r\n    reader.readAsBinaryString(f)\r\n  }\r\n\r\n  const downloadFile = () => {\r\n    // compare 2 files and take lowest value\r\n    if (Object.keys(fileB).length !== 0) {\r\n      let fileAKeys = Object.keys(fileA)\r\n      let fileBKeys = Object.keys(fileB)\r\n      let combined = fileAKeys.concat(fileBKeys)\r\n\r\n      let uniqueItems = [...new Set(combined)]\r\n\r\n      let quantities = Object.keys(q)\r\n\r\n      for (let i = 0; i < uniqueItems.length; i++) {\r\n        let individualItemPrice = {}\r\n        /* Item does not exist in File A but exits in File B */\r\n        if (fileA[uniqueItems[i]] === undefined) {\r\n          for (let j = 0; j < quantities.length; j++) {\r\n            individualItemPrice[quantities[j]] = fileB[uniqueItems[i]][quantities[j]]\r\n          }\r\n        }\r\n        /* Item does not exist in File B but exits in File A */\r\n        else if (fileB[uniqueItems[i]] === undefined) {\r\n          for (let j = 0; j < quantities.length; j++) {\r\n            individualItemPrice[quantities[j]] = fileA[uniqueItems[i]][quantities[j]]\r\n          }\r\n        }\r\n        /* Item Exists in both */\r\n        else {\r\n          for (let j = 0; j < quantities.length; j++) {\r\n            let A = fileA[uniqueItems[i]]\r\n            let B = fileB[uniqueItems[i]]\r\n\r\n            if (A[quantities[j]] === undefined) {\r\n              individualItemPrice[quantities[j]] = B[quantities[j]]\r\n            } else if (B[quantities[j]] === undefined) {\r\n              individualItemPrice[quantities[j]] = A[quantities[j]]\r\n            } else {\r\n              individualItemPrice[quantities[j]] = A[quantities[j]] < B[quantities[j]] ? A[quantities[j]] : B[quantities[j]]\r\n            }\r\n          }\r\n        }\r\n\r\n        fileA[uniqueItems[i]] = individualItemPrice\r\n      }\r\n    }\r\n\r\n\r\n    /* Write and Download File */\r\n    let keys = Object.keys(fileA)\r\n    let wbData = []\r\n\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      let rowData = {}\r\n\r\n      /* Part Name */\r\n      rowData[titleColumn] = keys[i]\r\n\r\n      /* Quantity - Prices */\r\n      let priceList = fileA[keys[i]]\r\n\r\n      let quantityArr = Object.keys(priceList)\r\n      let priceArr = Object.values(priceList)\r\n\r\n      for (let j = 0; j < quantityArr.length; j++) {\r\n        if (!isNaN(parseFloat(priceArr[j]))) {\r\n          rowData[\"[\" + quantityArr[j].toString() + \"]\"] = priceArr[j] * q[quantityArr[j]]\r\n        }\r\n      }\r\n      wbData.push(rowData)\r\n    }\r\n\r\n    const ws = XLSX.utils.json_to_sheet(wbData)\r\n    let wb = { Sheets: { 'data': ws }, SheetNames: ['data'] }\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const dd = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\r\n    FileSaver.saveAs(dd, 'Data.xlsx');\r\n  }\r\n\r\n  const updateMultiplier = (mult, value) => {\r\n    console.log(mult, value)\r\n    let tmp = JSON.parse(JSON.stringify(q))\r\n    if (mult.toString().length === 0) {\r\n      tmp[value] = 1\r\n      setQs(tmp)\r\n    } else {\r\n      tmp[value] = parseFloat(mult)\r\n      setQs(tmp)\r\n    }\r\n    console.log(tmp)\r\n  }\r\n\r\n\r\n  return (\r\n    <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>\r\n      <h2>\r\n        Upload Excel Files Here\r\n      </h2>\r\n      <div style={{ paddingBottom: '20px', display: 'flex', flexDirection: 'row' }}>\r\n        <div>\r\n          <div style={{ fontWeight: 'bold', fontSize: '14px' }}>File 1</div>\r\n          <input type=\"file\" onChange={(event) => onFileChange(event, true)} />\r\n        </div>\r\n        <div>\r\n          <div style={{ fontWeight: 'bold', fontSize: '14px' }}>File 2</div>\r\n          <input type=\"file\" onChange={(event) => onFileChange(event, false)} disabled={Object.keys(fileA).length === 0} />\r\n        </div>\r\n      </div>\r\n      <div style={{ paddingBottom: '30px' }}>\r\n        <h2>\r\n          Mark Up Value <span style={{ color: 'red', fontSize: '13px' }}>(numbers/ decimal only)</span>\r\n        </h2>\r\n        {\r\n          Object.keys(q).map((value) => {\r\n            return (\r\n              <div key={value}>\r\n                <label style={{ paddingRight: '10px' }}>\r\n                  Q - {value}\r\n                </label>\r\n                <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, value)} value={q[value]} />\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n        {\r\n          Object.keys(q).length === 0 &&\r\n          <div>\r\n            <h4 style={{ color: \"#333333\", textTransform: \"uppercase\" }}>[Multiplier fields will display once file is uploaded]</h4>\r\n          </div>\r\n        }\r\n        <button onClick={() => downloadFile()} style={{ marginTop: '20px', width: '200px', height: '40px', border: 'none', fontWeight: 'bold' }} disabled={Object.keys(fileA).length === 0}>\r\n          Download\r\n        </button>\r\n      </div>\r\n      <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>\r\n        <h3>Your Uploaded File <span style={{ fontWeight: 'bold', color: 'red', fontSize: '20px' }}>MUST</span> follow the following format: </h3>\r\n        <img alt=\"Sample Format\" src={require('../assets/Format.png')} width={\"80%\"} style={{ borderRadius: \"10px\" }} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Compile;\r\n","import React, { useState } from 'react';\r\nimport * as XLSX from 'xlsx';\r\nimport * as FileSaver from 'file-saver';\r\n\r\nconst Compare = () => {\r\n\r\n    // initialize defaulr variables\r\n    const [exchange, setExchange] = useState({\r\n        EURO: 1,\r\n        USD: 1\r\n    })\r\n\r\n    // will contain mark-up % & handling charges (USD)\r\n    const [quantities, setQuantities] = useState({})\r\n\r\n    // stock items to write to file\r\n    const [stock, setStock] = useState({})\r\n\r\n    const parseStockAvailbleFile = (data) => {\r\n        let renderedData = XLSX.read(data, { type: 'binary' });\r\n        const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\r\n\r\n        setExchange({\r\n            EURO: dataParse[3][2],\r\n            USD: dataParse[4][2]\r\n        })\r\n        for (let i = 2; i < dataParse[0].length; i++) {\r\n            let quantity = parseInt(dataParse[0][i])\r\n            if (!(quantity in quantities))\r\n                quantities[quantity] = {\r\n                    handlingCharge: dataParse[1][i],\r\n                    markUp: dataParse[2][i]\r\n                }\r\n        }\r\n        for (let i = 7; i < dataParse.length; i++) {\r\n            if (dataParse[i][1] === undefined)\r\n                break\r\n            const mpn = dataParse[i][1]\r\n            const brand = dataParse[i][2]\r\n            const qty = dataParse[i][3]\r\n            const remarks = dataParse[i][4] === undefined ? '' : dataParse[i][4]\r\n            if (qty != 0) {\r\n                stock[mpn] = {\r\n                    brand,\r\n                    qty,\r\n                    remarks\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const parseOpenPoPriceList = (data) => {\r\n        let renderedData = XLSX.read(data, { type: 'binary' });\r\n        const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\r\n        for (let i = 1; i < dataParse.length; i++) {\r\n            if (dataParse[i][1] === undefined)\r\n                break\r\n            const mpn = dataParse[i][0]\r\n            const opoCurr = dataParse[i][1]\r\n            const opoPrice = dataParse[i][2]\r\n            const opoDate = excelDateToJSDate(dataParse[i][3])\r\n\r\n            if (mpn in stock) {\r\n                // check for existing entry (check for date key)\r\n                if (stock[mpn]['opoDate'] != null) {\r\n                    // compare date\r\n                    if ((stock[mpn]['opoDate'] === opoDate.getTime() && (stock[mpn]['opoPrice'] * exchange[stock[mpn]['opoCurr']] < opoPrice * exchange[opoCurr])) || stock[mpn]['opoDate'] < opoDate.getTime()) {\r\n                        // replace existing item\r\n                        stock[mpn] = {\r\n                            ...stock[mpn],\r\n                            opoCurr,\r\n                            opoPrice,\r\n                            opoDate\r\n                        }\r\n                    }\r\n                } else {\r\n                    // set item\r\n                    stock[mpn] = {\r\n                        ...stock[mpn],\r\n                        opoCurr,\r\n                        opoPrice,\r\n                        opoDate\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const parseGoodsReceivedPriceList = (data) => {\r\n        let renderedData = XLSX.read(data, { type: 'binary' });\r\n        const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\r\n        for (let i = 1; i < dataParse.length; i++) {\r\n            if (dataParse[i][1] === undefined)\r\n                break\r\n            const mpn = dataParse[i][1]\r\n            const grCurr = dataParse[i][2]\r\n            const grPrice = dataParse[i][3]\r\n            const grDate = excelDateToJSDate(dataParse[i][0])\r\n\r\n            if (mpn in stock) {\r\n                // check for existing entry (check for date key)\r\n                if (stock[mpn]['grDate'] != null) {\r\n                    // compare date\r\n                    if ((stock[mpn]['grDate'] === grDate.getTime() && (stock[mpn]['grPrice'] * exchange[stock[mpn]['grCurr']] < grPrice * exchange[grCurr])) || stock[mpn]['grDate'] < grDate.getTime()) {\r\n                        // replace existing item\r\n                        stock[mpn] = {\r\n                            ...stock[mpn],\r\n                            grCurr,\r\n                            grPrice,\r\n                            grDate\r\n                        }\r\n                    }\r\n                } else {\r\n                    // set item\r\n                    stock[mpn] = {\r\n                        ...stock[mpn],\r\n                        grCurr,\r\n                        grPrice,\r\n                        grDate\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onFileChange = (e, fileNo) => {\r\n        e.preventDefault();\r\n        var files = e.target.files, f = files[0];\r\n        var reader = new FileReader();\r\n        reader.onload = function (e) {\r\n            if (fileNo === 1)\r\n                parseStockAvailbleFile(e.target.result)\r\n            else if (fileNo === 2)\r\n                parseOpenPoPriceList(e.target.result)\r\n            else\r\n                parseGoodsReceivedPriceList(e.target.result)\r\n        };\r\n        reader.readAsBinaryString(f)\r\n    }\r\n\r\n    const excelDateToJSDate = (serial) => {\r\n        var utc_days = Math.floor(serial - 25569);\r\n        var utc_value = utc_days * 86400;\r\n        var date_info = new Date(utc_value * 1000);\r\n        return new Date(date_info.getFullYear(), date_info.getMonth(), date_info.getDate());\r\n    }\r\n\r\n    const downloadFile = () => {\r\n\r\n        /* Write and Download File */\r\n        let workbookRows = []\r\n        let mpns = Object.keys(stock)\r\n\r\n        let myHeader = ['Line', 'MPN', 'Brand', 'Stock', 'Gr-Curr', 'GR-Price', 'Opo-Curr', 'Opo-Price']\r\n        for (let item in Object.keys(quantities)) {\r\n            myHeader.push('[' + item + ']')\r\n        }\r\n\r\n        for (let i = 0; i < mpns.length; i++) {\r\n            let row = {}\r\n            let mpn = mpns[i]\r\n            row['Line'] = i + 1\r\n            row['MPN'] = mpn\r\n            row['Brand'] = stock[mpn]['brand']\r\n            row['Stock'] = stock[mpn]['qty']\r\n            row['GR-Curr'] = stock[mpn]['grCurr']\r\n            row['GR-Price'] = stock[mpn]['grPrice']\r\n            row['Opo-Curr'] = stock[mpn]['opoCurr']\r\n            row['Opo-Price'] = stock[mpn]['opoPrice']\r\n\r\n            let grPriceUSD = stock[mpn]['grPrice'] * exchange[stock[mpn]['grCurr']]\r\n            let opoPriceUSD = stock[mpn]['opoPrice'] * exchange[stock[mpn]['opoCurr']]\r\n\r\n            // loop and add quantity + calculate unit price\r\n            let highestPrice = grPriceUSD > opoPriceUSD ? grPriceUSD : opoPriceUSD\r\n\r\n            for (let j = 0; j < Object.keys(quantities).length; j++) {\r\n                let quantity = Object.keys(quantities)[j]\r\n                let markUp = quantities[quantity]['markUp']\r\n                let handlingCharge = quantities[quantity]['handlingCharge']\r\n\r\n                // Formula: [Unit Price + Unit price x (Mark Up% / 100)+Handling Charges] x QTY Break ]x ForEx / QTY Break\r\n                let unitPrice = (((1 + markUp * 1.0 / 100) * highestPrice) * quantity + handlingCharge) / quantity\r\n                row['[' + quantity + ']'] = isNaN(unitPrice) ? '-' : unitPrice\r\n            }\r\n            workbookRows.push(row)\r\n        }\r\n\r\n        console.log(myHeader)\r\n        const ws = XLSX.utils.json_to_sheet(workbookRows)\r\n        let wb = { Sheets: { 'data': ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array', header: myHeader });\r\n        const dd = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\r\n        FileSaver.saveAs(dd, 'Data.xlsx');\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'center', flexDirection: 'column', alignItems: 'center' }}>\r\n            <h2>\r\n                Upload Excel Files Here\r\n            </h2>\r\n            <div style={{ width: '50%', paddingBottom: '20px', display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center' }}>\r\n                <div>\r\n                    <div style={{ fontWeight: 'bold', fontSize: '16px' }}>Stock Available</div>\r\n                    <input type=\"file\" onChange={(event) => onFileChange(event, 1)} />\r\n                </div>\r\n                <div>\r\n                    <div style={{ fontWeight: 'bold', fontSize: '16px' }}>OpenPoPriceList</div>\r\n                    <input type=\"file\" onChange={(event) => onFileChange(event, 2)} />\r\n                </div>\r\n                <div>\r\n                    <div style={{ fontWeight: 'bold', fontSize: '16px' }}>GoodsReceivedPriceList</div>\r\n                    <input type=\"file\" onChange={(event) => onFileChange(event, 3)} />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button onClick={() => downloadFile()} style={{ marginTop: '20px', width: '200px', height: '40px', border: 'none', fontWeight: 'bold' }} >\r\n                    Download\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Compare;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Compile from './views/compile'\nimport Compare from './views/compare'\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <h2>Wiselink Excel Automation</h2>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <ul className=\"navbar-nav mr-auto\">\n            {/* <li><Link to={'/'} className=\"nav-link\">Compile</Link></li>\n            <li><Link to={'/compare'} className=\"nav-link\">Compare</Link></li> */}\n            <li><Link to={'/excel-automation'} className=\"nav-link\">Compile</Link></li>\n            <li><Link to={'/excel-automation/compare'} className=\"nav-link\">Compare</Link></li>\n          </ul>\n        </nav>\n        <hr />\n        <Switch>\n          {/* <Route exact path='/' component={Compile} />\n          <Route path='/compare' component={Compare} /> */}\n          <Route exact path='/excel-automation' component={Compile} />\n          <Route path='/excel-automation/compare' component={Compare} />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}