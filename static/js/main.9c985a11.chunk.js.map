{"version":3,"sources":["assets/Format.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","fileA","setFileA","fileB","setFileB","q","setQs","titleColumn","setTitleColumn","onFileChange","e","isFirstFile","preventDefault","f","target","files","reader","FileReader","onload","data","renderedData","XLSX","type","dataParse","sheet_to_json","Sheets","SheetNames","header","i","length","key","parseInt","fileDict","partName","priceQuantity","j","quantity","value","undefined","excelReader","result","readAsBinaryString","style","justifyContent","alignItems","display","flexDirection","paddingBottom","fontWeight","fontSize","onChange","event","disabled","Object","keys","color","map","paddingRight","mult","console","log","tmp","JSON","parse","stringify","toString","parseFloat","updateMultiplier","textTransform","onClick","fileAKeys","fileBKeys","combined","concat","uniqueItems","Set","quantities","individualItemPrice","A","B","wbData","rowData","priceList","quantityArr","priceArr","values","isNaN","push","wb","json_to_sheet","excelBuffer","bookType","dd","Blob","FileSaver","downloadFile","marginTop","alt","src","require","width","borderRadius","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c985a11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Format.c48584e9.png\";","import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport * as FileSaver from 'file-saver';\n\nconst App = () => {\n\n  const [fileA, setFileA] = useState({})\n  const [fileB, setFileB] = useState({})\n\n  const [q, setQs] = useState({})\n  const [titleColumn, setTitleColumn] = useState(\"\")\n\n  const excelReader = (data, isFirstFile) => {\n    let renderedData = XLSX.read(data, { type: 'binary' });\n    const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\n\n    setTitleColumn(dataParse[0][0])\n\n    for (let i = 1; i < dataParse[0].length; i++) {\n      let key = parseInt(dataParse[0][i])\n      if (!(key in q))\n        q[key] = 1\n    }\n\n    setQs(q)\n\n    let fileDict = {}\n\n    for (let i = 1; i < dataParse.length; i++) {\n      let partName = dataParse[i][0]\n\n      let priceQuantity = {}\n      for (let j = 1; j < dataParse[i].length; j++) {\n        let quantity = parseInt(dataParse[0][j])\n        let value = dataParse[i][j]\n        priceQuantity[quantity] = value\n      }\n\n      fileDict[partName] = priceQuantity\n    }\n\n    delete fileDict[undefined]\n    isFirstFile ? setFileA(fileDict) : setFileB(fileDict)\n  }\n\n  const onFileChange = (e, isFirstFile) => {\n    e.preventDefault();\n    var files = e.target.files, f = files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      excelReader(e.target.result, isFirstFile)\n    };\n    reader.readAsBinaryString(f)\n  }\n\n  const downloadFile = () => {\n    // compare 2 files and take lowest value\n    if (Object.keys(fileB).length !== 0) {\n      let fileAKeys = Object.keys(fileA)\n      let fileBKeys = Object.keys(fileB)\n      let combined = fileAKeys.concat(fileBKeys)\n\n      let uniqueItems = [...new Set(combined)]\n\n      let quantities = Object.keys(q)\n\n      for (let i = 0; i < uniqueItems.length; i++) {\n        let individualItemPrice = {}\n        /* Item does not exist in File A but exits in File B */\n        if (fileA[uniqueItems[i]] === undefined) {\n          for (let j = 0; j < quantities.length; j++) {\n            individualItemPrice[quantities[j]] = fileB[uniqueItems[i]][quantities[j]]\n          }\n        }\n        /* Item does not exist in File B but exits in File A */\n        else if (fileB[uniqueItems[i]] === undefined) {\n          for (let j = 0; j < quantities.length; j++) {\n            individualItemPrice[quantities[j]] = fileA[uniqueItems[i]][quantities[j]]\n          }\n        }\n        /* Item Exists in both */\n        else {\n          for (let j = 0; j < quantities.length; j++) {\n            let A = fileA[uniqueItems[i]]\n            let B = fileB[uniqueItems[i]]\n\n            if (A[quantities[j]] === undefined) {\n              individualItemPrice[quantities[j]] = B[quantities[j]]\n            } else if (B[quantities[j]] === undefined) {\n              individualItemPrice[quantities[j]] = A[quantities[j]]\n            } else {\n              individualItemPrice[quantities[j]] = A[quantities[j]] < B[quantities[j]] ? A[quantities[j]] : B[quantities[j]]\n            }\n          }\n        }\n\n        fileA[uniqueItems[i]] = individualItemPrice\n      }\n    }\n\n\n    /* Write and Download File */\n    let keys = Object.keys(fileA)\n    let wbData = []\n\n\n    for (let i = 0; i < keys.length; i++) {\n      let rowData = {}\n\n      /* Part Name */\n      rowData[titleColumn] = keys[i]\n\n      /* Quantity - Prices */\n      let priceList = fileA[keys[i]]\n\n      let quantityArr = Object.keys(priceList)\n      let priceArr = Object.values(priceList)\n\n      for (let j = 0; j < quantityArr.length; j++) {\n        if (!isNaN(parseFloat(priceArr[j]))) {\n          rowData[\"[\" + quantityArr[j].toString() + \"]\"] = priceArr[j] * q[quantityArr[j]]\n        }\n      }\n      wbData.push(rowData)\n    }\n\n    const ws = XLSX.utils.json_to_sheet(wbData)\n    let wb = { Sheets: { 'data': ws }, SheetNames: ['data'] }\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const dd = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\n    FileSaver.saveAs(dd, 'Data.xlsx');\n  }\n\n  const updateMultiplier = (mult, value) => {\n    console.log(mult, value)\n    let tmp = JSON.parse(JSON.stringify(q))\n    if (mult.toString().length === 0) {\n      tmp[value] = 1\n      setQs(tmp)\n    } else {\n      tmp[value] = parseFloat(mult)\n      setQs(tmp)\n    }\n    console.log(tmp)\n  }\n\n\n  return (\n    <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>\n      <h2>\n        Upload Excel File Here\n      </h2>\n      <div style={{ paddingBottom: '20px', display: 'flex', flexDirection: 'row' }}>\n        <div>\n          <div style={{ fontWeight: 'bold', fontSize: '14px' }}>File 1</div>\n          <input type=\"file\" onChange={(event) => onFileChange(event, true)} />\n        </div>\n        <div>\n          <div style={{ fontWeight: 'bold', fontSize: '14px' }}>File 2</div>\n          <input type=\"file\" onChange={(event) => onFileChange(event, false)} disabled={Object.keys(fileA).length === 0} />\n        </div>\n      </div>\n      <div style={{ paddingBottom: '30px' }}>\n        <h2>\n          Mark Up Value <span style={{ color: 'red', fontSize: '13px' }}>(numbers/ decimal only)</span>\n        </h2>\n        {\n          Object.keys(q).map((value) => {\n            return (\n              <div key={value}>\n                <label style={{ paddingRight: '10px' }}>\n                  Q - {value}\n                </label>\n                <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, value)} value={q[value]} />\n              </div>\n            )\n          })\n        }\n        {\n          Object.keys(q).length === 0 &&\n          <div>\n            <h4 style={{ color: \"#333333\", textTransform: \"uppercase\" }}>[Multiplier fields will display once file is uploaded]</h4>\n          </div>\n        }\n        <button onClick={() => downloadFile()} style={{ marginTop: '20px' }} disabled={Object.keys(fileA).length === 0}>\n          Download\n        </button>\n      </div>\n      <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>\n        <h3>Your Uploaded File <span style={{ fontWeight: 'bold', color: 'red', fontSize: '20px' }}>MUST</span> follow the following format: </h3>\n        <img alt=\"Sample Format\" src={require('./assets/Format.png')} width={\"80%\"} style={{ borderRadius: \"10px\" }} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}