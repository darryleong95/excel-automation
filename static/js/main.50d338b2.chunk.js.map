{"version":3,"sources":["assets/Format.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","prices","setPrices","fileA","setFileA","fileB","setFileB","headers","setHeaders","excelReader","data","isFirstFile","renderedData","XLSX","type","dataParse","sheet_to_json","Sheets","SheetNames","header","fileDict","i","length","slice","undefined","updateMultiplier","mult","newPriceList","parseFloat","console","log","style","justifyContent","alignItems","display","flexDirection","paddingBottom","fontWeight","fontSize","onChange","event","e","preventDefault","f","target","files","reader","FileReader","onload","result","readAsBinaryString","onFileChange","onFileChange2","color","paddingRight","value","onClick","fileBKeys","Object","keys","Bkey","fileAKeys","Akey","priceListA","JSON","parse","stringify","priceListB","ll","sl","j","pll","pss","wbData","fr","push","rowData","priceList","isNaN","wb","json_to_sheet","excelBuffer","bookType","dd","Blob","FileSaver","downloadFile","marginTop","disabled","src","require","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.50d338b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Format.c50dbb84.png\";","import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport * as FileSaver from 'file-saver';\n\nconst App = () => {\n\n  const [prices, setPrices] = useState([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n  const [dlFile, setDlFile] = useState()\n\n  const [fileA, setFileA] = useState({})\n  const [fileB, setFileB] = useState({})\n\n  const [headers, setHeaders] = useState([])\n\n  const excelReader = (data, isFirstFile) => {\n    let renderedData = XLSX.read(data, { type: 'binary' });\n    const dataParse = XLSX.utils.sheet_to_json(renderedData.Sheets[renderedData.SheetNames[0]], { header: 1 });\n\n    setHeaders(dataParse[0])\n\n    let fileDict = {}\n\n    for (let i = 1; i < dataParse.length; i++) {\n      let partName = dataParse[i][0]\n      fileDict[partName] = dataParse[i].slice(1)\n    }\n\n    delete fileDict[undefined]\n    isFirstFile ? setFileA(fileDict) : setFileB(fileDict)\n  }\n\n  const onFileChange = (e) => {\n    e.preventDefault();\n    var files = e.target.files, f = files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      excelReader(e.target.result, true)\n    };\n    reader.readAsBinaryString(f)\n  }\n\n  const onFileChange2 = (e) => {\n    e.preventDefault();\n    var files = e.target.files, f = files[0];\n    var reader = new FileReader();\n    reader.onload = function (e) {\n      excelReader(e.target.result, false)\n    };\n    reader.readAsBinaryString(f)\n  }\n\n  const downloadFile = () => {\n    // compare 2 files and take lowest value\n\n    if (fileB != null) {\n      let fileBKeys = Object.keys(fileB)\n      for (let i = 0; i < fileBKeys.length; i++) {\n        let Bkey = fileBKeys[i]\n        if (fileA[Bkey] === undefined) {\n          fileA[Bkey] = fileB[Bkey]\n        }\n      }\n\n      let fileAKeys = Object.keys(fileA)\n      for (let i = 0; i < fileAKeys.length; i++) {\n        let Akey = fileAKeys[i]\n        if (fileB[Akey] !== undefined) {\n          /* check for lowest value here */\n          let priceListA = JSON.parse(JSON.stringify(fileA[Akey]))\n          let priceListB = JSON.parse(JSON.stringify(fileB[Akey]))\n          let ll = priceListA.length >= priceListB.length ? priceListA : priceListB\n          let sl = priceListA.length < priceListB.length ? priceListA : priceListB\n          for (let j = 0; j < ll.length; j++) {\n            let pll = ll[j]\n            let pss = sl[j]\n            ll[j] = pll < pss ? pll : pss // select lowest price of 2\n          }\n          /*Re-assign price list to fileA */\n          fileA[Akey] = ll\n        }\n      }\n    }\n\n    /* Write and Download File */\n    console.log(headers)\n\n    let keys = Object.keys(fileA)\n\n    let wbData = []\n\n    /* Create first row to format rest of datasheet */\n    let fr = {}\n    for (let i = 0; i < headers.length; i++) {\n      fr[headers[i]] = '-'\n    }\n    wbData.push(fr)\n\n    for (let i = 0; i < keys.length; i++) {\n      let rowData = {}\n\n      /* Part Name */\n      rowData[headers[0]] = keys[i]\n\n      /* Quantity - Prices */\n      let priceList = fileA[keys[i]]\n      for (let j = 0; j < priceList.length; j++) {\n        if (!isNaN(parseFloat(priceList[j]))) {\n          rowData[headers[j + 1]] = priceList[j] * prices[j]\n        }\n      }\n\n      wbData.push(rowData)\n    }\n\n    console.log(wbData)\n\n    const ws = XLSX.utils.json_to_sheet(wbData)\n    let wb = { Sheets: { 'data': ws }, SheetNames: ['data'] }\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n    const dd = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8' });\n    FileSaver.saveAs(dd, 'Data.xlsx');\n  }\n\n  const updateMultiplier = (mult, i) => {\n    let newPriceList = prices.slice()\n    newPriceList[i] = parseFloat(mult)\n    console.log(newPriceList)\n    setPrices(newPriceList)\n  }\n\n\n  return (\n    <div style={{ justifyContent: 'center', alignItems: 'center', display: 'flex', flexDirection: 'column' }}>\n      <h2>\n        Upload Excel File Here\n      </h2>\n      <div style={{ paddingBottom: '20px', display: 'flex', flexDirection: 'row' }}>\n        <div>\n          <div style={{ fontWeight: 'bold', fontSize: '14px' }}>File 1</div>\n          <input type=\"file\" onChange={(event) => onFileChange(event)} />\n        </div>\n        <div>\n          <div style={{ fontWeight: 'bold', fontSize: '14px' }}>File 2</div>\n          <input type=\"file\" onChange={(event) => onFileChange2(event)} />\n        </div>\n      </div>\n      <div style={{ paddingBottom: '30px' }}>\n        <h2>\n          Mark Up Value <span style={{ color: 'red', fontSize: '13px' }}>(numbers/ decimal only)</span>\n        </h2>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q10\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 0)} value={prices[0]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q25\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 1)} value={prices[1]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q50\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 2)} value={prices[2]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q100\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 3)} value={prices[3]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q250\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 4)} value={prices[4]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q500\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 5)} value={prices[5]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q1000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 6)} value={prices[6]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q2500\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 7)} value={prices[7]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q3000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 8)} value={prices[8]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q5000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 9)} value={prices[9]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q10000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 10)} value={prices[10]} />\n        </div>\n        <div>\n          <label style={{ paddingRight: '10px' }}>\n            Q25000\n          </label>\n          <input type=\"number\" onChange={(e) => updateMultiplier(e.target.value, 11)} value={prices[11]} />\n        </div>\n        <button onClick={() => downloadFile()} style={{ marginTop: '20px' }} disabled={Object.keys(fileA).length === 0}>\n          Download\n        </button>\n      </div>\n      <div>\n        <h3>Your Uploaded File <span style={{ fontWeight: 'bold', color: 'red', fontSize: '20px' }}>MUST</span> follow the following format: </h3>\n        <img src={require('./assets/Format.png')} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}